package cipherPackage;

/**
 *
 * @author dinht
 */
public class JFPlayFair extends javax.swing.JFrame {

    /** Creates new form JFPlayFair */
    public JFPlayFair() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        encButton = new javax.swing.JButton();
        decButton = new javax.swing.JButton();
        geneKeyButton = new javax.swing.JButton();
        keyTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        geneKeyTextField = new javax.swing.JTextField();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PlayFair Cipher");
        setSize(new java.awt.Dimension(1200, 900));

        encButton.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        encButton.setText("Encrypt");
        encButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encButtonActionPerformed(evt);
            }
        });

        decButton.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        decButton.setText("Decrypt");
        decButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decButtonActionPerformed(evt);
            }
        });

        geneKeyButton.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        geneKeyButton.setText("Generate key");
        geneKeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geneKeyButtonActionPerformed(evt);
            }
        });

        keyTextField.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        inputTextArea.setColumns(20);
        inputTextArea.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        inputTextArea.setRows(5);
        jScrollPane1.setViewportView(inputTextArea);

        outputTextArea.setColumns(20);
        outputTextArea.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        outputTextArea.setRows(5);
        jScrollPane2.setViewportView(outputTextArea);

        geneKeyTextField.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        label1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        label1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        label1.setText("Input");

        label2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        label2.setText("Output");

        label3.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        label3.setText("Key");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1067, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(geneKeyButton)
                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(keyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(geneKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(decButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(encButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(104, 104, 104)))
                .addGap(48, 48, 48))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(encButton)
                        .addGap(25, 25, 25)
                        .addComponent(decButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(keyTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(geneKeyButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(geneKeyTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
        );

        label1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private static char[][] charTable;                      //ma trận để chứa key
    private static final int SIZE = 5;                      //hằng kích thước của ma trận

    private static boolean exist(int[] temp, int n) {       //phương thức để kiểm tra sự tồn tại trong mảng 
        for (int i = 0; i < temp.length; i++) {
            if (n == temp[i]) {
                return true;
            }
        }
        return false;
    }

    public static String generateKey(String keyWord) {      //phương thức tạo key từ một keyWord 
        int[] temp = new int[26];
        int count = 0;
        StringBuilder str = new StringBuilder();
        for (int i = 0; i < keyWord.length(); i++) {
            if (keyWord.charAt(i) == ' ') {                 //skip khoảng cách của keyWord
                continue;
            }
            if (!exist(temp, keyWord.charAt(i))) {          //kiểm tra sự tồn tại các ký tự của keyWord trong mảng temp 
                temp[count] = keyWord.charAt(i);
                count++;
                str.append(keyWord.charAt(i));              //thêm ký tự đó vào chuỗi kết quả nếu chưa có
            }
        }
        for (int i = 'a'; i <= 'z'; i++) {                  //vòng lặp để thêm các ký tự còn thiếu tuwfw a->z 
            if (!exist(temp, i) && i != 'j') {
                temp[count] = i;
                count++;
                str.append((char) i);
            }
        }
        return str.toString();                              //trả về key hoàn chỉnh
    }
    private void geneKeyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geneKeyButtonActionPerformed
        String keyWord = keyTextField.getText();
        String key = generateKey(keyWord);
        geneKeyTextField.setText(key);
    }//GEN-LAST:event_geneKeyButtonActionPerformed
    private static void createTable(String key) {                //phương thức tạo ma trận chứa key vừa đucợ tạo ra
        charTable = new char[SIZE][SIZE];
        String keyString = key.toLowerCase().replaceAll("[^a-z]", "").replace("j", "i");               
        StringBuilder sb = new StringBuilder();
        for (char c : keyString.toCharArray()) {
            if (sb.indexOf(String.valueOf(c)) == -1) {
                sb.append(c);
            }
        }
        for (char c = 'a'; c <= 'z'; c++) {
            if (c != 'j' && sb.indexOf(String.valueOf(c)) == -1) {
                sb.append(c);
            }
        }
        for (int i = 0, k = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                charTable[i][j] = sb.charAt(k++);
            }
        }
    }

    private static void search(char[][] keyT, char a, char b, int[] arr) {      //phương thức tìm vị trí của 2 ký tự được truyền vào
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (keyT[i][j] == a) {                                          //lưu vị trí của ký tự trùng với a truyền vào
                    arr[0] = i;                                                 //0-1 là hàng và cột của a
                    arr[1] = j;
                }
                if (keyT[i][j] == b) {                                           //lưu vị trí của ký tự trùng với b truyền vào
                    arr[2] = i;                                                  //2-3  là hàng và cột của b
                    arr[3] = j;
                }
            }
        }
    }

    private static int mod5(int a) {    
        return (a % SIZE);
    }

    public static String modifyString(String input) {           //phương thức chuẩn hóa text trước khi mã hóa, các thao tác gồm 
        String noSpaces = input.replaceAll("\\s", "");           //loại bỏ khoảng cách và thêm 'z' vào cuối nếu số ký tự kaf kẻ
        if (noSpaces.length() % 2 != 0) {
            noSpaces += 'z';
        }

        return noSpaces;
    }

    private static String encrypt(String inText, char[][] keyT, int ps) {       //phương thức mã hóa
        int i;
        char[] str = inText.toCharArray();
        StringBuilder outText = new StringBuilder();
        int[] a = new int[4];

        for (i = 0; i < ps; i += 2) {
            search(keyT, str[i], str[i + 1], a);                              

            if (a[0] == a[2]) {                                                 //a[0] là hàng của ký tự i, b[2] là hàng của i+1 => chung hàng
                str[i] = keyT[a[0]][mod5(a[1] + 1)];                            // thay bàng 2 ký tự chung hàng bên phải
                str[i + 1] = keyT[a[0]][mod5(a[3] + 1)];
            } else if (a[1] == a[3]) {                                          // chung cột thay bằng 2 ký tự bên dưới
                str[i] = keyT[mod5(a[0] + 1)][a[1]];
                str[i + 1] = keyT[mod5(a[2] + 1)][a[1]];
            } else { // Rectangle
                str[i] = keyT[a[0]][a[3]];                                      // khác hàng và cột thì thay bằng 2 vị trí đối diênj
                str[i + 1] = keyT[a[2]][a[1]];
            }
            outText.append(str[i]).append(str[i + 1]);
        }
        return outText.toString();                                              
    }
    private void encButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encButtonActionPerformed
        String key = geneKeyTextField.getText();
        createTable(key);
        String plainText = inputTextArea.getText();
        String inText = modifyString(plainText);
        int ps = inText.length();
        outputTextArea.setText(encrypt(inText, charTable, ps));
    }//GEN-LAST:event_encButtonActionPerformed

    private static String decrypt(String inText, char[][] keyT, int ps) {       //ngược lại với phương thức encrypt
        int i;
        char[] str = inText.toCharArray();
        StringBuilder outText = new StringBuilder();
        int[] a = new int[4];

        for (i = 0; i < ps; i += 2) {
            search(keyT, str[i], str[i + 1], a);

            if (a[0] == a[2]) {                                                 //chung hàng thay bằng ký tự bên trái
                str[i] = keyT[a[0]][mod5(a[1] - 1 + SIZE)];
                str[i + 1] = keyT[a[0]][mod5(a[3] - 1 + SIZE)];
            } else if (a[1] == a[3]) {                                          //chung cột thay bằng ký tự bên trên
                str[i] = keyT[mod5(a[0] - 1 + SIZE)][a[1]];
                str[i + 1] = keyT[mod5(a[2] - 1 + SIZE)][a[1]];
            } else { 
                str[i] = keyT[a[0]][a[3]];
                str[i + 1] = keyT[a[2]][a[1]];
            }
            outText.append(str[i]).append(str[i + 1]);
        }
        return outText.toString();
    }
    private void decButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decButtonActionPerformed
        String plainText = inputTextArea.getText();

        int ps = plainText.length();

        outputTextArea.setText(decrypt(plainText, charTable, ps));
    }//GEN-LAST:event_decButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFPlayFair.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFPlayFair.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFPlayFair.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFPlayFair.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFPlayFair().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton decButton;
    private javax.swing.JButton encButton;
    private javax.swing.JButton geneKeyButton;
    private javax.swing.JTextField geneKeyTextField;
    private javax.swing.JTextArea inputTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField keyTextField;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private javax.swing.JTextArea outputTextArea;
    // End of variables declaration//GEN-END:variables
}

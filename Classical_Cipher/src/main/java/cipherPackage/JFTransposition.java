package cipherPackage;

/**
 *
 * @author dinht
 */
public class JFTransposition extends javax.swing.JFrame {

    /** Creates new form JFTransposition */
    public JFTransposition() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        decButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        keyTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        encButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Transposition Cipher");

        decButton.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        decButton.setText("Decrypt");
        decButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel3.setText("Key");

        keyTextField.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        inputTextArea.setColumns(20);
        inputTextArea.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        inputTextArea.setRows(5);
        jScrollPane1.setViewportView(inputTextArea);

        outputTextArea.setColumns(20);
        outputTextArea.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        outputTextArea.setRows(5);
        jScrollPane2.setViewportView(outputTextArea);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Input text");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("Output");

        encButton.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        encButton.setText("Encrypt");
        encButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1100, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(keyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(encButton)
                        .addGap(89, 89, 89)
                        .addComponent(decButton))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(keyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(encButton)
                    .addComponent(decButton))
                .addGap(54, 54, 54)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static String encrypt(String inText, String key) {
        int numRows = (int) Math.ceil((double) inText.length() / key.length());        //tính số hàng cần thiết
        char[][] table = new char[numRows][key.length()];                                //tạo 1 mảng 2 chiều với số hàng mới tính được và số cột=độ dài khóa
        int k = 0;
        for (int i = 0; i < numRows; i++) {                                             //điền plain text vào bảng theo hàng
            for (int j = 0; j < key.length(); j++) {
                if (k < inText.length()) {
                    table[i][j] = inText.charAt(k++);
                } else {                                                                //nếu hàng còn thiếu thì sẽ thay bằng 'z'
                    table[i][j] = 'z';
                }
            }
        }
        char[] sortedKey = key.toCharArray();                                           //chuyển key thành 1 mảng ksy tự rồi sắp xếp nó để đọc từ bé đến lớn
        java.util.Arrays.sort(sortedKey);
        StringBuilder encryptedMessage = new StringBuilder();                           //cipher textsexs được xây dựng bằng cách đọc theo hàng dọc đã được sắp xếp ở trên
        for (char c : sortedKey) {
            int col = key.indexOf(c);
            for (int i = 0; i < numRows; i++) {
                encryptedMessage.append(table[i][col]);
            }
        }
        return encryptedMessage.toString();                                             //trả về cipher text hoàn chỉnh
    }
    
    private void encButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encButtonActionPerformed
        String inText = inputTextArea.getText();
        String key = keyTextField.getText();
        String cipherText = encrypt(inText, key);
        outputTextArea.setText(cipherText);
    }//GEN-LAST:event_encButtonActionPerformed

    public static String decrypt(String cipherText, String key) {
        int numRows = (int) Math.ceil((double) cipherText.length() / key.length());        
        char[][] table = new char[numRows][key.length()];                                        
        char[] sortedKey = key.toCharArray();
        java.util.Arrays.sort(sortedKey);
        int k = 0;
        for (char c : sortedKey) {
            int col = key.indexOf(c);
            for (int i = 0; i < numRows; i++) {
                if (k < cipherText.length()) {
                    table[i][col] = cipherText.charAt(k++);
                } else {
                    table[i][col] = ' '; 
                }
            }
        }
        StringBuilder plainText = new StringBuilder();
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < key.length(); j++) {
                plainText.append(table[i][j]);
            }
        }
        return plainText.toString().trim();
    }

    private void decButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decButtonActionPerformed
        String inText = inputTextArea.getText();
        String key = keyTextField.getText();
        String plainText=decrypt(inText, key);
        outputTextArea.setText(plainText);
    }//GEN-LAST:event_decButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFTransposition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFTransposition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFTransposition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFTransposition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFTransposition().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton decButton;
    private javax.swing.JButton encButton;
    private javax.swing.JTextArea inputTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField keyTextField;
    private javax.swing.JTextArea outputTextArea;
    // End of variables declaration//GEN-END:variables
}
